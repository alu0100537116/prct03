 RESPUESTAS PRACTICA 3.
 
 
 21. Las "" leen los saltos de carro, las '' es para mostrar directamente.
 
 22. y 23 - %Q hace el trabajo de las dobles comillas "" %q de las comillas simples ''
 
 24. --4--
     --2--

 25. --#{a}--
     --#{b}--   Ya que se usan las comillas simples, se lee directamente
     
     
 26. s[0,2]= "he"
     s[-1,1]= "o"
     s[0,10]= "hello"
     
 27. " hello world "
 
 28. " ... "
 
 29. " 222 "
 
 30. Escribe %w ( words )
 
 31. %w Escribe \t y \n como si fuesen caracteres normales.
 
 32. %W Entiende \t y \n como simbolos especiales ( salto de carro)
 
 33. Un array de 3 valores nulos.
 
 34. Un array de 3 valores Ceros.
 
 35. Un array de contenido por 1,2,3 y 4. Los valores de x.
 
 36. Un array de 3 valores, [0,2,4].
 
 37.  a[1,1]= "b"
      a[-2,2]= "d" "e"
      a[0..2]="a" "b" "c"
      a[0..1]="a" "b"
      a[-2..-1]="d" "e"
   
 38. a[0,2] = %w{A B}    -> "A" "B" "c" "d" "e"
     a[2..5] = %w{C D E} -> "A" "B" "C" "D" "E"
     a[0,0] = [1,2,3]    -> [1, 2, 3, "A" "B" "C" "D" "E"]
     a[0,2] = []         -> [3, "A", "B", "C", "D", "E"]
     a[-1,1] = [ ’Z’ ]   -> [3, "A", "B", "C", "D", "Z"] 
     a[-2,2] = nil       -> ["B" "C"]
 
 
 39.  a = (1...4).to_a -> [1,2,3]
      a = a + [4, 5]   -> [1,2,3,4,5]
      a += [[6, 7, 8]] -> [1,2,3,4,5,[6,7,8]]
      a = a + 9        -> No se puede sumar dos elemenos de distinto tipo.
      
      
40.   x = %w{a b c b a} -> ["a", "b", "c", "b", "a"]
      x = x - %w{b c d} -> ["a", "a"]
      
      
41.   z = [0]*8  -> [0, 0, 0, 0, 0, 0, 0, 0]


42.   a = []          -> Crea un array de una posición vacía.
      a << 1          -> [1]
      a << 2 << 3     -> [1,2,3]
      a << [4, 5, 6]  -> [1,2,3, [4,5,6]]
      a.concat [7, 8] -> [1,2,3,[4,5,6],7,8]
      
      
43.   c = a | b -> [1,2,3,4,5]
      d = b | a -> [5,4,3,2,1]
      e = a & b -> [2,3,4]
      f = b & a -> [4,3,2]
      
 
44.  a.to_a                         -> [1,2,3,4,5,6,7,8,9,10]
     b.to_a			     -> [1,2,3,4,5,6,7,8,9]
     b.include? 10	             -> false
     b.include? 8                   -> true
     b.step(2) {|x| print "#{x} " } -> 1 3 5 7 9  => 1...10
     1..3.to_a			     -> Devuelve error, se le debe pasar una variable.
     

45. r.member? 50    -> True.
    r.include? 99.9 -> True.
    r.member? 99.9  -> True.
    
    
46. true.class          -> TrueClass
    false.class         -> FalseClass
    puts "hello" if 0   -> hello
    puts "hello" if nil -> nil
    puts "hello" if ""  -> hello ( Con un warning )
    
    
47. x.class           -> Symbol
    x == ’sym’	      -> False
    x == :sym 	      -> True
    z.class           -> Symbol
    x == ’sym’.to_sym -> True
    x.to_s == ’sym’   -> True
    
    
48. print s    -> Rub
    print s, t -> Rub Java
    
    
49. "%d %s" % [3, "rubies"] -> 3 Rubies.


50. x, y = 4, 5       -> [4,5]
    z = x > y ? x : y -> 5
    x,y,z = [1,2,3]   -> [1,2,3]

    
51. x.keys                           -> [:a, :b]
    x.values			      -> [1,2]
    x[:c] = 3   
    x     			      -> {:a=>1 , :b=>2, :c=>3}
    x.delete(’a’)		     
    x				      -> {:a=>1 , :b=>2, :c=>3}
    x.delete(:a)		      
    x				      -> {:b=>2, :c=>3}
    x.delete_if { |k,v| v % 2 == 0 } 
    x 			              -> {:c=>3}
    
    
52. yield 4,5 -> Le pasa el control al bloque.

53. Que en lugar de crear un array crea una tabla hash.

54. ["hello", "world", "hello", "LPP"] 

55. c = { :a => 3, :b => 2, :c => 1 } -> Introduce esos valores en c
    c.keys.sort.each { |k| puts c[k] } -> Introduce esos valores en un array c, manejando k como indice
					      para cada posicion.
					      
					      

















